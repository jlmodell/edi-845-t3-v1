import { type NextPage } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
// import Link from "next/link";

import { api } from "~/utils/api";
import { type EdiSchema } from "~/server/api/routers/edi";

const generate_nine_digit_number = () => {
  return Math.floor(100000000 + Math.random() * 900000000);
};

const Home: NextPage = () => {
  const mapper = api.edi.map_to_json.useMutation();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#015ac7] to-[#161c88]">
        <Form />
      </main>
    </>
  );
};

export default Home;

const Form: React.FC = () => {
  // create form from EdiSchema

  const [formData, setFormData] = useState<EdiSchema>({
    documentType: "",
    controlNumber: generate_nine_digit_number(),
    datetimes: [],
    contracts: [],
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: type === "checkbox" ? checked : value,
    }));
  };

  return (
    <div className="flex w-full max-w-[850px] flex-col items-center justify-center rounded-lg bg-white/80 p-4 shadow-lg">
      <h1 className="text-center text-2xl font-bold">EDI Form</h1>

      <form className="flex w-full flex-col items-center justify-center space-y-4 p-4">
        <TextInputField
          label="Document Type"
          name="documentType"
          value={formData.documentType}
          handler={handleChange}
        />
        <StaticNumberInputField
          label="Control Number"
          name="controlNumber"
          value={formData.controlNumber}
        />

        <ReadContractDetails />

        <ReadDealerDetails />

        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

const TextInputField = ({
  value,
  label,
  name,
  handler,
}: {
  value: string;
  label: string;
  name: string;
  handler: (e: React.ChangeEvent<HTMLInputElement>) => void;
}) => {
  return (
    <label className="flex w-full items-center justify-between space-x-5">
      <span className="font-semibold">{label}</span>
      <input
        className="w-1/2 rounded-md"
        type="text"
        name={name}
        value={value}
        onChange={handler}
      />
    </label>
  );
};

const StaticNumberInputField = ({
  value,
  label,
  name,
}: {
  value: number;
  label: string;
  name: string;
}) => {
  return (
    <label className="flex w-full items-center justify-between space-x-5">
      <span className="font-semibold">{label}</span>
      <input
        className="rounded-md bg-gray-300 text-gray-600"
        type="number"
        disabled={true}
        name={name}
        value={value}
      />
    </label>
  );
};

const ReadContractDetails = () => {
  const [contractText, setContractText] = useState<string>("");
  const [contract, setContract] = useState<{
    transactionType: string;
    contractId: string;
    oldContractId: string | null;
  }>({
    transactionType: "",
    contractId: "",
    oldContractId: null,
  });

  useEffect(() => {
    const temp = contractText.split("\n");
    // get last element in contract
    let c = temp[0]?.trim().split(" ");
    c = c?.slice(c.length - 1);

    setContract((prevContract) => {
      return {
        ...prevContract,
        contractId: c?.[0] as string,
      };
    });

    if (contract?.oldContractId == null) {
      const oldContractId = prompt("Input Old Contract Id or leave blank");
      if (oldContractId) {
        setContract((prevContract) => {
          return {
            ...prevContract,
            oldContractId,
          };
        });
      } else {
        setContract((prevContract) => {
          return {
            ...prevContract,
            oldContractId: "",
          };
        });
      }
    }

    console.log(temp);
    console.log(c);
    console.log(contract);
  }, [contractText, setContractText]);

  return (
    <div className="flex w-full items-start justify-between space-x-5">
      <span className="font-semibold">Contract Details</span>
      <textarea
        className="w-1/2 rounded-md"
        rows={10}
        value={contractText}
        onChange={(e) => setContractText(e.target.value)}
      />
    </div>
  );
};
const ReadDealerDetails = () => {
  const [dealerText, setDealerText] = useState<string>("");

  return (
    <div className="flex w-full items-start justify-between space-x-5">
      <span className="font-semibold">Dealer Details</span>
      <textarea
        className="w-1/2 rounded-md"
        rows={10}
        value={dealerText}
        onChange={(e) => setDealerText(e.target.value)}
      />
    </div>
  );
};
